- name: "Setup Ansible Automation Platform for the Smart Management Demo"
  hosts: localhost
  gather_facts: false

  tasks:

  - name: Check CONTROLLER_HOST env variable
    ansible.builtin.fail:
      msg: The CONTROLLER_HOST env variable is not defined
    when: not lookup('ansible.builtin.env', 'CONTROLLER_HOST')

  - name: Check CONTROLLER_USERNAME env variable
    ansible.builtin.fail:
      msg: The CONTROLLER_USERNAME env variable is not defined
    when: not lookup('ansible.builtin.env', 'CONTROLLER_USERNAME')

  - name: Check CONTROLLER_PASSWORD env variable
    ansible.builtin.fail:
      msg: The CONTROLLER_PASSWORD env variable is not defined
    when: not lookup('ansible.builtin.env', 'CONTROLLER_PASSWORD')

  - name: Check SNOW_HOST env variable
    ansible.builtin.fail:
      msg: The SNOW_HOST env variable is not defined
    when: not lookup('ansible.builtin.env', 'SNOW_HOST')

  - name: Check SNOW_USERNAME env variable
    ansible.builtin.fail:
      msg: The SNOW_USERNAME env variable is not defined
    when: not lookup('ansible.builtin.env', 'SNOW_USERNAME')

  - name: Check SNOW_PASSWORD env variable
    ansible.builtin.fail:
      msg: The SNOW_PASSWORD env variable is not defined
    when: not lookup('ansible.builtin.env', 'SNOW_PASSWORD')

  - name: Check SLACK_TOKEN env variable
    ansible.builtin.fail:
      msg: The SLACK_TOKEN env variable is not defined
    when: not lookup('ansible.builtin.env', 'SLACK_TOKEN')

#  - name: Debug controller_token variable
#    ansible.builtin.debug:
#      var: controller_token

  - name: "Create 'AQ - SNOW' Credential Type"
    awx.awx.credential_type:
      name: "AQ - SNOW"
      kind: "cloud"
      inputs: "{{ lookup('file', 'files/snow_credential_inputs.json') }}"
      injectors: "{{ lookup('file', 'files/snow_credential_injector.json') }}"
      state: present

  - name: "Create 'AQ - SNOW' Credential"
    awx.awx.credential:
      name: "AQ - SNOW"
      organization: "Default"
      credential_type: "AQ - SNOW"
      inputs:
        # It requires the same IDs as per the inputs.json file
        SNOW_HOST: "{{ lookup('env', 'SNOW_HOST') }}"
        SNOW_PASSWORD: "{{ lookup('env', 'SNOW_PASSWORD') }}"
        SNOW_USERNAME: "{{ lookup('env', 'SNOW_USERNAME') }}"
      state: present

  - name: "Create 'AQ - SLACK' Credential Type"
    awx.awx.credential_type:
      name: "AQ - SLACK"
      kind: "cloud"
      inputs: "{{ lookup('file', 'files/slack_token_inputs.json') }}"
      injectors: "{{ lookup('file', 'files/slack_token_injector.json') }}"
      state: present

  - name: "Create 'AQ - SLACK' Credential"
    awx.awx.credential:
      name: "AQ - SLACK"
      organization: "Default"
      credential_type: "AQ - SLACK"
      inputs:
        # It requires the same IDs as per the inputs.json file
        SLACK_TOKEN: "{{ lookup('env', 'SLACK_TOKEN') }}"
      state: present

  - name: "Create 'AQ - Automated Management Project' from this github project"
    awx.awx.project:
      name: "AQ - Automated Management"
      organization: "Default"
      scm_type: "git"
      scm_url: "{{ git_repo_url }}"
      scm_update_on_launch: true
      state: present
      update_project: yes

  - name: "Create AQ - RHEL7 Inventory"
    awx.awx.inventory:
      name: "AQ - RHEL7"
      organization: "Default"
      state: present

  - name: Add node1 to 'AQ - RHEL7' inventory
    awx.awx.host:
      name: node1.example.com
      description: "node1"
      inventory: "AQ - RHEL7"
      state: present

  - name: "Create AQ - Local Inventory"
    awx.awx.inventory:
      name: "AQ - Local"
      organization: "Default"
      state: present

  - name: Add localhost to 'AQ - Local' inventory
    awx.awx.host:
      name: localhost
      description: "localhost"
      inventory: "AQ - Local"
      state: present
      variables:
        ansible_connection: local
        ansible_python_interpreter: !unsafe '{{ ansible_playbook_python }}'

  # The following assumes there is the image in the quay registry already otherwise the image must be created 
  - name: "Add EE-snow execution environment to the controller instance"
    awx.awx.execution_environment:
      name: "EE-snow"
      image: quay.io/maquino/ee_snow:0.0.1

  - name: "Create 'AQ - snow' Job Template"
    awx.awx.job_template:
      name: "AQ - SNOW"
      job_type: "run"
      organization: "Default"
      inventory: "AQ - Local"
      project: "AQ - Automated Management"
      playbook: "{{ snow_playbook }}"
      execution_environment: "EE-snow"
      credentials:
        - "AQ - SNOW"

  - name: "Create 'AQ - Server patch' Job Template"
    awx.awx.job_template:
      name: "AQ - Server patch"
      job_type: "run"
      organization: "Default"
      inventory: "AQ - RHEL7"
      project: "AQ - Automated Management"
      playbook: "{{ patch_playbook }}"
      credentials:
        - "Workshop Credential"
      extra_vars:
        HOSTS: node1.example.com
        CHECK: no
      use_fact_cache: true
      become_enabled: true
      state: "present"

  - name: "Create 'AQ - Install httpd' Job Template"
    awx.awx.job_template:
      name: "AQ - Install httpd"
      job_type: "run"
      organization: "Default"
      inventory: "AQ - RHEL7"
      project: "AQ - Automated Management"
      playbook: "{{ httpd_playbook }}"
      credentials:
        - "Workshop Credential"
      extra_vars:
        HOSTS: node1.example.com
        CHECK: no
        first_line: Hello
        second_line: World!
      become_enabled: true
      state: "present"
